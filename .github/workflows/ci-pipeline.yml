name: CI/CD Pipeline

env:
  DOCKER_REPO: "pablords"

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      # 1. Fazer checkout do código
      - name: Check out code
        uses: actions/checkout@v2

      # 2. Gerar o diff (exemplo simples entre HEAD~1 e HEAD)
      - name: Generate diff
        run: |
          git diff HEAD~1 HEAD > diff.txt
          echo "Diff gerado com sucesso."

      # 3. Chamar o script JavaScript que invoca a OpenAI
      - name: Call OpenAI for code review
        run: node .github/scripts/code_review.js
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # 4. Postar como comentário no PR (exemplo usando 'github-script')
      - name: Post code review comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review_comments.txt', 'utf8');
            const issue_number = context.payload.pull_request.number;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: review
            });
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: code-review

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configura a versão do Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      # Cache do Maven
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Obtém a versão do projeto
      - name: Get Project Version
        id: project-version
        run: echo "::set-output name=VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      # Build da aplicação
      - name: Build Application
        run: mvn clean package

      # Executa os testes
      - name: Run Tests
        run: mvn test

      # Armazena o artefato gerado
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: parking-application
          path: target/parking-*.jar

    outputs:
      VERSION: ${{ steps.project-version.outputs.VERSION }}

  package:
    name: Package Application as Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Faz download do artefato gerado
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: parking-application

      # Debug para verificar a versão
      - name: Debug Version
        run: echo "VERSION=${{ needs.build.outputs.VERSION }}"

      # Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build da imagem Docker
      - name: Build Docker Image
        run: |
          docker build \
            -t $DOCKER_REPO/parking:${{ needs.build.outputs.VERSION }} \
            --build-arg JAR_FILE=parking-${{ needs.build.outputs.VERSION }}.jar .

      # Push da imagem Docker para o registry
      - name: Push Docker Image
        run: |
          docker push $DOCKER_REPO/parking:${{ needs.build.outputs.VERSION }}

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: package

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Deploy da aplicação
      - name: Deploy Application
        run: |
          echo "Deploy steps go here..."
          # Adicione os comandos para realizar o deploy, como kubectl ou comandos de infraestrutura
