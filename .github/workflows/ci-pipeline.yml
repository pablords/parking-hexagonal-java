name: CI/CD Pipeline

env:
  DOCKER_REPO: "pablords"
  ENABLE_CODE_REVIEW: 'false'

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]



jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configura a versão do Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      # Cache do Maven
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Obtém a versão do projeto
      - name: Get Project Version
        id: project-version
        run: echo "::set-output name=VERSION::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      # Build da aplicação
      - name: Build Application
        run: mvn clean package -DskipTests

      # Executa os testes unitários
      - name: Run Unit Tests
        run: mvn test -Punit-test

      # Executa os testes de componentes
      - name: Run Component Tests
        run: mvn test -Pcomponent-test
      
      # Executa os testes de integracão
      - name: Run Integration Tests
        run: mvn test -Pintegration-test

      # Armazena o artefato gerado
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: parking-application
          path: target/parking-*.jar

    outputs:
      VERSION: ${{ steps.project-version.outputs.VERSION }}

  package:
    name: Package Application as Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Faz download do artefato gerado
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: parking-application

      # Debug para verificar a versão
      - name: Debug Version
        run: echo "VERSION=${{ needs.build.outputs.VERSION }}"

      # Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME || 'default-username' }}
          password: ${{ secrets.DOCKER_PASSWORD || 'default-password' }}

      # Build da imagem Docker
      - name: Build Docker Image
        run: |
          docker build \
            -t $DOCKER_REPO/parking:${{ needs.build.outputs.VERSION }} \
            --build-arg JAR_FILE=parking-${{ needs.build.outputs.VERSION }}.jar .

      # Push da imagem Docker para o registry
      - name: Push Docker Image
        run: |
          docker push $DOCKER_REPO/parking:${{ needs.build.outputs.VERSION }}

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: package

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Deploy da aplicação
      - name: Deploy Application
        run: |
          echo "Deploy steps go here..."
          # Adicione os comandos para realizar o deploy, como kubectl ou comandos de infraestrutura
