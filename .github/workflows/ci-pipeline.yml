name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configura a versão do Java
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Substitua pela versão do Java usada na sua aplicação
          distribution: 'temurin'

      # Cache do Maven
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Get Project Version
        id: project-version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      # Build da aplicação
      - name: Build Application
        run: mvn clean package -Dproject.version=${{ env.VERSION }}

      # Executa os testes
      - name: Run Tests
        run: mvn test

  package:
    name: Package Application as Docker Image
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Login no Docker Hub (ou outro registry)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build da imagem Docker
      - name: Build Docker Image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/parking:${{ env.VERSION }} \
            --build-arg JAR_FILE=target/parking-${{ env.VERSION }}.jar .


      # Push da imagem Docker para o registry
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/parking:${{ env.VERSION }}

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: package

    steps:
      # Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

      # Deploy da aplicação
      - name: Deploy Application
        run: |
          echo "Deploy steps go here..."
          # Adicione os comandos para realizar o deploy, como kubectl ou comandos de infraestrutura
